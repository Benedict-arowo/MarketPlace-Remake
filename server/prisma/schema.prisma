// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AdStatus {
  PENDING
  ACTIVE
  EXPIRED
}

enum MediaType {
  IMAGE
  VIDEO
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum ReportType {
  PRODUCT
  USER
  STORE
}

enum BoostStatus {
  PENDING
  ACTIVE
  EXPIRED
}

model User {
  id       String @id @default(uuid())
  username String

  email    String @unique
  password String
  // wishlist Product[] @relation("UserWishlist")

  lastOnline    DateTime?
  roles         Role[]
  subscriptions Subscription[]
  notifications Notification[]
  reviews       Review[]
  likedProducts Product[]      @relation("UserLikes")
  logs          AuditLog[]
  reportee      Report[]       @relation(name: "ReporterUser")
  reported      Report[]       @relation(name: "ReportTargetUser")
  messages      Message[]      @relation("UserMessages")
  chats         Chat[]         @relation("ChatParticipants")
  ads           Ad[]
  products      Product[]      @relation("UserProducts")
  payments      Payment[]

  isDeleted                  DateTime?
  isOnline                   Boolean   @default(false)
  isVerified                 Boolean   @default(false)
  verificationCode           Int?
  verificationCodeExpiration DateTime?

  resetPasswordToken        String?
  resetPasswordTokenExpires DateTime?

  createdAt DateTime @default(now())
  store     Store?
}

model Store {
  id          String  @id @default(uuid())
  name        String
  description String
  customUrl   String? @unique

  owner    User      @relation(fields: [ownerId], references: [id])
  products Product[]

  isActive       Boolean
  isBoosted      Boolean?
  boostedAt      DateTime?
  boostExpiresAt DateTime?
  reports        Report[]

  ownerId String @unique
}

model Ad {
  id        String    @id @default(uuid())
  seller    User      @relation(fields: [sellerId], references: [id])
  sellerId  String
  title     String
  content   String
  status    AdStatus  @default(PENDING)
  expiresAt DateTime?
  clicks    Int @default(0) // Track ad clicks
  payments  Payment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Plan {
  id             String   @id @default(uuid())
  name           String
  durationInDays Int
  amount         Float
  createdAt      DateTime @default(now())
  active Boolean

  subscriptions Subscription[]
}

model Subscription {
  id String @id @default(uuid())

  user User @relation(fields: [userId], references: [id])
  plan Plan @relation(fields: [planId], references: [id])

  created DateTime @default(now())
  expires DateTime? 
  isActive Boolean @default(true)
  payments Payment[]

  planId String
  userId String
}

// model Wishlist {
//   id    String @id @default(uuid())
//   owner User   @relation(fields: [ownerId], references: [id])

//   products Product[] @relation("WishlistProducts")

//   ownerId String @unique
// }

model Product {
  id String @id @default(uuid())

  name        String
  description String
  quantity    Int

  price           Float
  discountedPrice Float?
  store           Store? @relation(fields: [storeId], references: [id])
  owner           User  @relation("UserProducts", fields: [ownerId], references: [id])

  isActive Boolean @default(false)

  isBoosted      Boolean?
  boostedAt      DateTime?
  boostExpiresAt DateTime?
  location    String? // Optional location field
  isNegotiable Boolean @default(true) // Allow buyers to negotiate
  viewsCount  Int @default(0) // Track product views

  category Category[]
  likes    User[]     @relation("UserLikes")
  reviews  Review[]
  media    Media[] 
  reports  Report[]
  payments Payment[]

  storeId String?
  ownerId String
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Media {
  id      String    @id @default(uuid())
  url     String
  type    MediaType
  public_id String?
  product Product   @relation(fields: [productId], references: [id])

  productId String
  createdAt DateTime @default(now())
}

model AuditLog {
  id        String      @id @default(uuid())
  action    AuditAction
  entity    String // e.g., "Product", "User"
  entityId  String // ID of the entity being modified
  user      User?       @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime    @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  content   String
  recipient User     @relation(fields: [userId], references: [id])
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  userId String
}

model Review {
  id       String  @id @default(uuid())
  content  String
  rating   Int
  product  Product @relation(fields: [productId], references: [id])
  reviewer User    @relation(fields: [userId], references: [id])

  productId String
  userId    String
  createdAt DateTime @default(now())
}

model Chat {
  id           String    @id @default(uuid())
  participants User[]    @relation("ChatParticipants")
  messages     Message[] @relation("ChatMessages")
  isArchived   Boolean   @default(false)
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
}

model Message {
  id        String      @id @default(uuid())
  content   String
  type      MessageType @default(TEXT)
  sender    User        @relation(fields: [senderId], references: [id], name: "UserMessages")
  chat      Chat        @relation(fields: [chatId], references: [id], name: "ChatMessages")
  isRead    Boolean     @default(false) // Track if the message has been read

  isDeleted Boolean     @default(false)
  createdAt DateTime    @default(now())

  senderId String
  chatId   String
}

model Payment {
  id          String        @id @default(uuid())
  amount      Float
  status      PaymentStatus @default(PENDING)
  paymentDate DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  adId          String?
  boostedPostId String?
  productId     String?
  subscriptionId String?

  ad      Ad?      @relation(fields: [adId], references: [id])
  product Product? @relation(fields: [productId], references: [id])
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Report {
  id            String       @id @default(uuid())
  reporter      User         @relation(fields: [reporterId], references: [id], name: "ReporterUser")
  targetUser    User?        @relation(fields: [targetUserId], references: [id], name: "ReportTargetUser")
  targetStore   Store?       @relation(fields: [targetStoreId], references: [id])
  targetProduct Product?     @relation(fields: [targetProductId], references: [id])
  type          ReportType
  reason        String
  status        ReportStatus @default(PENDING)
  createdAt     DateTime     @default(now())

  reporterId      String
  targetUserId    String?
  targetStoreId   String?
  targetProductId String?
}
